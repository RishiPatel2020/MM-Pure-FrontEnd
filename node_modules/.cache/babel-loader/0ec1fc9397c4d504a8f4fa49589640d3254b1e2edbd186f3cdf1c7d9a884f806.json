{"ast":null,"code":"var _jsxFileName = \"/Users/rishipatel/Documents/Coding/WebDevelopment/FullStackProjects/TiffinService/MM-backend/MM_Backend/MM-Backend/front-end/src/SharedComponents/PopUp/Payment/Payment.js\",\n  _s = $RefreshSig$();\nimport userSession from \"../../../Service/userSession\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { useEffect } from \"react\";\nimport StripeBackend from \"../../../Service/StripeBackend\";\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = _ref => {\n  _s();\n  let {\n    cart,\n    mealNumbers,\n    cartPrice,\n    delivDate\n  } = _ref;\n  // To give users live update about making payment & storing order\n  const [statusPopUp, setStatusPopUp] = useState(false);\n  const [statusTitle, setStatusTitle] = useState(\"\");\n  const [statusBody, setStatusBody] = useState(\"\");\n  const STRIPE_KEY = \"pk_test_51MLGUDLxe44udBspRQVfTcgFGVZRI6NRIlrfX4lexUptlrYTJjsqfJZFBeDrKXdyOCiJVVQKcD88WAQDsNPVWZ9b00bKBn0FaU\";\n\n  // stripeToken will have store shipping info\n  const [stripeToken, setStripeToken] = useState(null);\n  const onToken = token => {\n    setStripeToken(token);\n    console.log(\"TOKEN::: \" + JSON.stringify(token));\n  };\n  useEffect(() => {\n    const makeRequest = () => {\n      setStatusTitle(\"Payment Status\");\n      // Sending req to backend to create charge based on card details entered by user..\n      StripeBackend.requestToServer(stripeToken, cartPrice * 100, setStatusBody, setStatusPopUp) // Response received from backend and we know if payment succeded or not\n      .then(res => {\n        // Payment failed\n        if (res.status === 206) {\n          setStatusBody(res.data);\n          // let user view err msg for 2s; close pop up; reopen payment pop up\n          setTimeout(() => {\n            setStatusPopUp(false);\n            document.getElementById(\"hiddenPaymentButton\").click();\n          }, 2000);\n        } else {\n          // Successful payment; so, STORE ORDER IN DB\n          setStatusBody(\"Successful Payment!\");\n          setTimeout(() => {\n            setStatusTitle(\"Order Status\");\n            setStatusBody(\"Sending Order to DB....\");\n          }, 1000);\n          setTimeout(() => {\n            // mealAndFreqsArr is in format: [[id1,q1],[id2,q2]....]\n            const mealAndFreqsArr = [];\n            cart.map(item => {\n              mealAndFreqsArr.push([item.id, mealNumbers[item.id]]);\n            });\n            let todaysDate = new Date().toDateString();\n            const objToSend = {\n              Order_date: todaysDate,\n              Shipping_date: delivDate,\n              Total_Price: cartPrice,\n              email: stripeToken.email,\n              Address: `${stripeToken.card.address_line1} ${stripeToken.card.address_city}, ${stripeToken.card.address_zip}`,\n              Customer_id: userSession.getUser().id,\n              mealAndFreqs: mealAndFreqsArr\n            };\n            // setStatusTitle(\"Order Status\");\n            OrderAPIService.addOrder(objToSend, setStatusBody).then(res => {\n              setStatusBody(\"Order saved in DB! Order#: \" + res.data);\n              // after 2 seconds close the pop up\n              setTimeout(() => {\n                setStatusPopUp(false);\n                // here we empty previous token\n                setStripeToken(null);\n              }, 2000);\n            }).catch(err => {\n              setStatusBody(\"Could NOT store the order please contact Admin \");\n              // after 2 seconds close the pop up\n              setTimeout(() => {\n                setStatusPopUp(false);\n                // here we empty previous token\n                setStripeToken(null);\n              }, 2000);\n            });\n\n            // SUCCESS; RESET: cart, numMealsSelected, mealNumbers\n            setCart([]);\n            setNumMealsSelected(0);\n            setCartPrice(0);\n            for (let index = 0; index < mealNumbers.length; index++) {\n              mealNumbers[index] = 0;\n            }\n          }, 1200);\n        }\n      }).catch(error => {\n        setStatusPopUp(true);\n        setStatusBody(\"\" + error);\n        setTimeout(() => {\n          setStatusPopUp(false);\n          document.getElementById(\"hiddenPaymentButton\").click();\n        }, 3000);\n      });\n    };\n    stripeToken && makeRequest();\n  }, [stripeToken]);\n  return (\n    /*#__PURE__*/\n    // Regular Stripe pop UP\n    _jsxDEV(StripeCheckout, {\n      name: \"Mirchi Meals\",\n      shippingAddress: true,\n      billingAddress: true,\n      description: `Total: $${cartPrice}`,\n      amount: cartPrice * 100,\n      token: onToken,\n      stripeKey: STRIPE_KEY,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"hiddenPaymentButton\",\n        style: {\n          borderColor: \"blue\",\n          padding: \"10px\",\n          fontSize: \"large\",\n          margin: \"50%\",\n          height: \"70px\",\n          width: \"100px\",\n          backgroundColor: \"black\"\n        },\n        hidden: true,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"white\"\n          },\n          children: [\"Pay $\", cartPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Payment, \"qD1uBNiMktsUa12cxB5lxkfJccs=\");\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["userSession","StripeCheckout","useEffect","StripeBackend","useState","React","Payment","cart","mealNumbers","cartPrice","delivDate","statusPopUp","setStatusPopUp","statusTitle","setStatusTitle","statusBody","setStatusBody","STRIPE_KEY","stripeToken","setStripeToken","onToken","token","console","log","JSON","stringify","makeRequest","requestToServer","then","res","status","data","setTimeout","document","getElementById","click","mealAndFreqsArr","map","item","push","id","todaysDate","Date","toDateString","objToSend","Order_date","Shipping_date","Total_Price","email","Address","card","address_line1","address_city","address_zip","Customer_id","getUser","mealAndFreqs","OrderAPIService","addOrder","catch","err","setCart","setNumMealsSelected","setCartPrice","index","length","error","borderColor","padding","fontSize","margin","height","width","backgroundColor","color"],"sources":["/Users/rishipatel/Documents/Coding/WebDevelopment/FullStackProjects/TiffinService/MM-backend/MM_Backend/MM-Backend/front-end/src/SharedComponents/PopUp/Payment/Payment.js"],"sourcesContent":["import userSession from \"../../../Service/userSession\";\nimport StripeCheckout from \"react-stripe-checkout\";\n\nimport { useEffect } from \"react\";\nimport StripeBackend from \"../../../Service/StripeBackend\";\n\nimport { useState } from \"react\";\nimport React from \"react\";\n\nconst Payment = ({ cart, mealNumbers ,cartPrice, delivDate,}) => {\n  // To give users live update about making payment & storing order\n  const [statusPopUp, setStatusPopUp] = useState(false);\n  const [statusTitle, setStatusTitle] = useState(\"\");\n  const [statusBody, setStatusBody] = useState(\"\");\n  const STRIPE_KEY =\n    \"pk_test_51MLGUDLxe44udBspRQVfTcgFGVZRI6NRIlrfX4lexUptlrYTJjsqfJZFBeDrKXdyOCiJVVQKcD88WAQDsNPVWZ9b00bKBn0FaU\";\n\n  // stripeToken will have store shipping info\n  const [stripeToken, setStripeToken] = useState(null);\n  const onToken = (token) => {\n    setStripeToken(token);\n    console.log(\"TOKEN::: \" + JSON.stringify(token));\n  };\n\n  useEffect(() => {\n    const makeRequest = () => {\n      setStatusTitle(\"Payment Status\");\n      // Sending req to backend to create charge based on card details entered by user..\n      StripeBackend.requestToServer(\n        stripeToken,\n        cartPrice * 100,\n        setStatusBody,\n        setStatusPopUp\n      ) // Response received from backend and we know if payment succeded or not\n        .then((res) => {\n          // Payment failed\n          if (res.status === 206) {\n            setStatusBody(res.data);\n            // let user view err msg for 2s; close pop up; reopen payment pop up\n            setTimeout(() => {\n              setStatusPopUp(false);\n              document.getElementById(\"hiddenPaymentButton\").click();\n            }, 2000);\n          } else {\n            // Successful payment; so, STORE ORDER IN DB\n            setStatusBody(\"Successful Payment!\");\n            setTimeout(() => {\n              setStatusTitle(\"Order Status\");\n              setStatusBody(\"Sending Order to DB....\");\n            }, 1000);\n            setTimeout(() => {\n              // mealAndFreqsArr is in format: [[id1,q1],[id2,q2]....]\n              const mealAndFreqsArr = [];\n              cart.map((item) => {\n                mealAndFreqsArr.push([item.id, mealNumbers[item.id]]);\n              });\n\n              let todaysDate = new Date().toDateString();\n\n              const objToSend = {\n                Order_date: todaysDate,\n                Shipping_date: delivDate,\n                Total_Price: cartPrice,\n                email: stripeToken.email,\n                Address: `${stripeToken.card.address_line1} ${stripeToken.card.address_city}, ${stripeToken.card.address_zip}`,\n                Customer_id: userSession.getUser().id,\n                mealAndFreqs: mealAndFreqsArr,\n              };\n              // setStatusTitle(\"Order Status\");\n              OrderAPIService.addOrder(objToSend, setStatusBody)\n                .then((res) => {\n                  setStatusBody(\"Order saved in DB! Order#: \" + res.data);\n                  // after 2 seconds close the pop up\n                  setTimeout(() => {\n                    setStatusPopUp(false);\n                    // here we empty previous token\n                    setStripeToken(null);\n                  }, 2000);\n                })\n                .catch((err) => {\n                  setStatusBody(\n                    \"Could NOT store the order please contact Admin \"\n                  );\n                  // after 2 seconds close the pop up\n                  setTimeout(() => {\n                    setStatusPopUp(false);\n                    // here we empty previous token\n                    setStripeToken(null);\n                  }, 2000);\n                });\n\n              // SUCCESS; RESET: cart, numMealsSelected, mealNumbers\n              setCart([]);\n              setNumMealsSelected(0);\n              setCartPrice(0);\n              for (let index = 0; index < mealNumbers.length; index++) {\n                mealNumbers[index] = 0;\n              }\n            }, 1200);\n          }\n        })\n        .catch((error) => {\n          setStatusPopUp(true);\n          setStatusBody(\"\" + error);\n          setTimeout(() => {\n            setStatusPopUp(false);\n            document.getElementById(\"hiddenPaymentButton\").click();\n          }, 3000);\n        });\n    };\n    stripeToken && makeRequest();\n  }, [stripeToken]);\n\n  return (\n    // Regular Stripe pop UP\n    <StripeCheckout\n      name=\"Mirchi Meals\"\n      shippingAddress\n      billingAddress\n      description={`Total: $${cartPrice}`}\n      amount={cartPrice * 100}\n      token={onToken}\n      stripeKey={STRIPE_KEY}\n    >\n      <button\n        id=\"hiddenPaymentButton\"\n        style={{\n          borderColor: \"blue\",\n          padding: \"10px\",\n          fontSize: \"large\",\n          margin: \"50%\",\n          height: \"70px\",\n          width: \"100px\",\n          backgroundColor: \"black\",\n        }}\n        hidden\n      >\n        <span style={{ color: \"white\" }}>Pay ${cartPrice}</span>\n      </button>\n    </StripeCheckout>\n  );\n};\n\nexport default Payment;\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,8BAA8B;AACtD,OAAOC,cAAc,MAAM,uBAAuB;AAElD,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,aAAa,MAAM,gCAAgC;AAE1D,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,OAAO,GAAG,QAAiD;EAAA;EAAA,IAAhD;IAAEC,IAAI;IAAEC,WAAW;IAAEC,SAAS;IAAEC;EAAU,CAAC;EAC1D;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMa,UAAU,GACd,6GAA6G;;EAE/G;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMgB,OAAO,GAAIC,KAAK,IAAK;IACzBF,cAAc,CAACE,KAAK,CAAC;IACrBC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EAClD,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd,MAAMwB,WAAW,GAAG,MAAM;MACxBZ,cAAc,CAAC,gBAAgB,CAAC;MAChC;MACAX,aAAa,CAACwB,eAAe,CAC3BT,WAAW,EACXT,SAAS,GAAG,GAAG,EACfO,aAAa,EACbJ,cAAc,CACf,CAAC;MAAA,CACCgB,IAAI,CAAEC,GAAG,IAAK;QACb;QACA,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACtBd,aAAa,CAACa,GAAG,CAACE,IAAI,CAAC;UACvB;UACAC,UAAU,CAAC,MAAM;YACfpB,cAAc,CAAC,KAAK,CAAC;YACrBqB,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAACC,KAAK,EAAE;UACxD,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,MAAM;UACL;UACAnB,aAAa,CAAC,qBAAqB,CAAC;UACpCgB,UAAU,CAAC,MAAM;YACflB,cAAc,CAAC,cAAc,CAAC;YAC9BE,aAAa,CAAC,yBAAyB,CAAC;UAC1C,CAAC,EAAE,IAAI,CAAC;UACRgB,UAAU,CAAC,MAAM;YACf;YACA,MAAMI,eAAe,GAAG,EAAE;YAC1B7B,IAAI,CAAC8B,GAAG,CAAEC,IAAI,IAAK;cACjBF,eAAe,CAACG,IAAI,CAAC,CAACD,IAAI,CAACE,EAAE,EAAEhC,WAAW,CAAC8B,IAAI,CAACE,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC;YAEF,IAAIC,UAAU,GAAG,IAAIC,IAAI,EAAE,CAACC,YAAY,EAAE;YAE1C,MAAMC,SAAS,GAAG;cAChBC,UAAU,EAAEJ,UAAU;cACtBK,aAAa,EAAEpC,SAAS;cACxBqC,WAAW,EAAEtC,SAAS;cACtBuC,KAAK,EAAE9B,WAAW,CAAC8B,KAAK;cACxBC,OAAO,EAAG,GAAE/B,WAAW,CAACgC,IAAI,CAACC,aAAc,IAAGjC,WAAW,CAACgC,IAAI,CAACE,YAAa,KAAIlC,WAAW,CAACgC,IAAI,CAACG,WAAY,EAAC;cAC9GC,WAAW,EAAEtD,WAAW,CAACuD,OAAO,EAAE,CAACf,EAAE;cACrCgB,YAAY,EAAEpB;YAChB,CAAC;YACD;YACAqB,eAAe,CAACC,QAAQ,CAACd,SAAS,EAAE5B,aAAa,CAAC,CAC/CY,IAAI,CAAEC,GAAG,IAAK;cACbb,aAAa,CAAC,6BAA6B,GAAGa,GAAG,CAACE,IAAI,CAAC;cACvD;cACAC,UAAU,CAAC,MAAM;gBACfpB,cAAc,CAAC,KAAK,CAAC;gBACrB;gBACAO,cAAc,CAAC,IAAI,CAAC;cACtB,CAAC,EAAE,IAAI,CAAC;YACV,CAAC,CAAC,CACDwC,KAAK,CAAEC,GAAG,IAAK;cACd5C,aAAa,CACX,iDAAiD,CAClD;cACD;cACAgB,UAAU,CAAC,MAAM;gBACfpB,cAAc,CAAC,KAAK,CAAC;gBACrB;gBACAO,cAAc,CAAC,IAAI,CAAC;cACtB,CAAC,EAAE,IAAI,CAAC;YACV,CAAC,CAAC;;YAEJ;YACA0C,OAAO,CAAC,EAAE,CAAC;YACXC,mBAAmB,CAAC,CAAC,CAAC;YACtBC,YAAY,CAAC,CAAC,CAAC;YACf,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGxD,WAAW,CAACyD,MAAM,EAAED,KAAK,EAAE,EAAE;cACvDxD,WAAW,CAACwD,KAAK,CAAC,GAAG,CAAC;YACxB;UACF,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC,CAAC,CACDL,KAAK,CAAEO,KAAK,IAAK;QAChBtD,cAAc,CAAC,IAAI,CAAC;QACpBI,aAAa,CAAC,EAAE,GAAGkD,KAAK,CAAC;QACzBlC,UAAU,CAAC,MAAM;UACfpB,cAAc,CAAC,KAAK,CAAC;UACrBqB,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAACC,KAAK,EAAE;QACxD,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACN,CAAC;IACDjB,WAAW,IAAIQ,WAAW,EAAE;EAC9B,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EAEjB;IAAA;IACE;IACA,QAAC,cAAc;MACb,IAAI,EAAC,cAAc;MACnB,eAAe;MACf,cAAc;MACd,WAAW,EAAG,WAAUT,SAAU,EAAE;MACpC,MAAM,EAAEA,SAAS,GAAG,GAAI;MACxB,KAAK,EAAEW,OAAQ;MACf,SAAS,EAAEH,UAAW;MAAA,uBAEtB;QACE,EAAE,EAAC,qBAAqB;QACxB,KAAK,EAAE;UACLkD,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE,MAAM;UACfC,QAAQ,EAAE,OAAO;UACjBC,MAAM,EAAE,KAAK;UACbC,MAAM,EAAE,MAAM;UACdC,KAAK,EAAE,OAAO;UACdC,eAAe,EAAE;QACnB,CAAE;QACF,MAAM;QAAA,uBAEN;UAAM,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAQ,CAAE;UAAA,oBAAOjE,SAAS;QAAA;UAAA;UAAA;UAAA;QAAA;MAAQ;QAAA;QAAA;QAAA;MAAA;IACjD;MAAA;MAAA;MAAA;IAAA;EACM;AAErB,CAAC;AAAC,GApIIH,OAAO;AAAA,KAAPA,OAAO;AAsIb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}